<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.tarena.ht.mapper.UserMapper">
	
	<!-- 查询用户表，内部是实现了4张表关联查询 -->
		<select id="findAll" resultMap="userRM">
	<!-- sql语句全部小写  mybatis里写sql末尾不要加分号 -->
			SELECT *
FROM (
	SELECT *
	FROM user_p u
		LEFT JOIN (
			SELECT u.user_info_id, u.name, u.card_no, u.manager_id, m.m_name
				, u.join_date, u.salary, u.birthday, u.gender, u.station
				, u.telephone, u.user_level, u.remark, u.order_no
			FROM user_info_p u
				LEFT JOIN (
					SELECT user_info_id AS m_id, name AS m_name
					FROM user_info_p
				) m ON u.manager_id = m.m_id 
		) info ON u.user_id = info.user_info_id 
) u
	LEFT JOIN (
		SELECT dept_id AS d_id, dept_name
		FROM dept_p
	) d ON u.dept_id = d.d_id 
			
		</select>
	<!-- 
		autoMapping="true"  主表对象能够完成自动映射  
		1.字段与属性一致
		2.驼峰映射     user_id~~~~userId
		杠杠 在映射文件中有特殊含义 注释中不要写
	 -->
	<resultMap type="User" id="userRM" autoMapping="true">
		<!--完成主表映射  -->
		<id column="user_id" property="userId"/>
		
		<!--封装userInfo对象  -->
		<association property="userInfo" javaType="UserInfo" resultMap="infoRM"/>
		
		<!--封装部门对象  -->
		<association property="dept" javaType="Dept">
			<id column="d_id" property="deptId"/>
			<result column="dept_name" property="deptName"/>
		</association>
	</resultMap>
	
	<!--为了封装 serInfo的结果集  -->
	<resultMap type="UserInfo" id="infoRM" autoMapping="true">
		<id column="user_info_id" property="userInfoId"/>
		<!--封装上级领导信息 -->
		<association property="manager" javaType="UserInfo">
			<id column="manager_id" property="userInfoId"/>
			<result column="m_name" property="name"/>
		</association>
	</resultMap>
	
	<update id="updateState">
		update user_p set state=#{state}  where user_id in(
			<foreach collection="userIds" item="id" separator=",">
				#{id}
			</foreach>
		)
	</update>
	<!-- 删除用户信息 -->
	<delete id="deleteUser">
		delete from user_p  where user_id in (
		<!-- 由于传递的参数就是数组，写array就行。如果传递进来的是一个map，那么写map的key -->
			<foreach collection="array" item="id" separator=",">
				#{id}
			</foreach>
		)
	</delete>

	
	<!-- 用户新增 -->
	<insert id="saveUser">
		<!-- 作业，自己补齐列明 -->
		insert into user_p values (
			#{userId,jdbcType=VARCHAR},
			#{dept.deptId,jdbcType=VARCHAR},
			#{username,jdbcType=VARCHAR},
			#{password,jdbcType=VARCHAR},
			#{state},
			#{createBy,jdbcType=VARCHAR},
			#{createDept,jdbcType=VARCHAR},
			#{createTime,jdbcType=DATE},
			#{updateBy,jdbcType=VARCHAR},
			#{updateTime,jdbcType=DATE}		
		)
	</insert>
	
	<!-- 根据用户id查询信息 -->
	<select id="findUserById" resultMap="userRM">
		    select * from  ( select * from 
(select * from user_p u
left join
(select  u.user_info_id,u.name,u.card_no,u.manager_id,m.m_name,u.join_date,u.salary,u.birthday,u.gender,u.station,u.telephone,u.user_level,u.remark,u.order_no
 from  
user_info_p u
left join
(select user_info_id m_id,name  m_name from user_info_p) m
on u.manager_id =m.m_id) info

on 
u.user_id=info.user_info_id) u

left join
(
     select dept_id d_id,dept_name from dept_p
     
) d
 on u.dept_id=d.d_id ) u where u.user_id=#{userId}
	</select>
	
	<!-- 删除用户的时候需要把用户和角色的关联关系表中的数据 一同删除 -->
	<delete id="deleteUserAndRole">
			delete from role_user_p where user_id in  (
				<foreach collection="array" item="id" separator=",">
	 			#{id}
	 			</foreach>
			)
	</delete>
	
	<!-- 根据用户名和密码查询  用户是否存在 -->
	<select id="findUser" resultMap="userRM">
		 select * from  ( select * from 
(select * from user_p u
left join
(select  u.user_info_id,u.name,u.card_no,u.manager_id,m.m_name,u.join_date,u.salary,u.birthday,u.gender,u.station,u.telephone,u.user_level,u.remark,u.order_no
 from  
user_info_p u
left join
(select user_info_id m_id,name  m_name from user_info_p) m
on u.manager_id =m.m_id) info

on 
u.user_id=info.user_info_id) u

left join
(
     select dept_id d_id,dept_name from dept_p
     
) d
 on u.dept_id=d.d_id ) u where u.username=#{username} and u.password=#{password}
	</select>
</mapper>
